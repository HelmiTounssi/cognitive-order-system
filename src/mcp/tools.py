"""
Module d'outils (tools) - Fonctions mock simulant des APIs externes
Ces fonctions interagissent avec la base de connaissances et la base vectorielle
"""

import random
import uuid
from typing import Dict, List, Tuple, Optional
from datetime import datetime


def create_order_tool(client_id: str, items_list: List[Dict], 
                     knowledge_base) -> str:
    """
    Cr√©e une nouvelle commande dans le graphe RDF
    
    Args:
        client_id: Identifiant du client
        items_list: Liste des articles avec product_id et quantity
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        str: ID de la commande cr√©√©e
    """
    try:
        # G√©n√®re un ID unique pour la commande
        order_id = f"order_{uuid.uuid4().hex[:8]}"
        
        # Calcule le montant total
        total_amount = 0.0
        for item in items_list:
            product_id = item['product_id']
            quantity = item['quantity']
            
            # R√©cup√®re les d√©tails du produit depuis la base de connaissances
            product_details = knowledge_base.get_product_details(product_id)
            if product_details:
                price = float(product_details.get('hasPrice', 0))
                total_amount += price * quantity
        
        # Cr√©e la commande dans le graphe RDF
        knowledge_base.add_order(order_id, client_id, total_amount, "en_attente")
        
        print(f"‚úÖ Commande {order_id} cr√©√©e pour le client {client_id}")
        print(f"   Montant total: {total_amount:.2f}‚Ç¨")
        print(f"   Articles: {len(items_list)}")
        
        return order_id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la commande: {e}")
        return None


def check_stock_tool(product_id: str, quantity: int, 
                    knowledge_base) -> Tuple[bool, str]:
    """
    V√©rifie la disponibilit√© en stock d'un produit
    
    Args:
        product_id: Identifiant du produit
        quantity: Quantit√© demand√©e
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        # R√©cup√®re les d√©tails du produit
        product_details = knowledge_base.get_product_details(product_id)
        
        if not product_details:
            return False, f"Produit {product_id} non trouv√©"
        
        current_stock = int(product_details.get('hasStock', 0))
        product_name = product_details.get('hasName', 'Produit inconnu')
        
        # Simule parfois un √©chec al√©atoire (10% de chance)
        if random.random() < 0.1:
            return False, f"Erreur temporaire lors de la v√©rification du stock pour {product_name}"
        
        if current_stock >= quantity:
            # Met √† jour le stock
            new_stock = current_stock - quantity
            knowledge_base.update_product_stock(product_id, new_stock)
            
            print(f"‚úÖ Stock v√©rifi√© pour {product_name}")
            print(f"   Stock disponible: {current_stock} ‚Üí {new_stock}")
            print(f"   Quantit√© demand√©e: {quantity}")
            
            return True, f"Stock suffisant pour {product_name}"
        else:
            print(f"‚ùå Stock insuffisant pour {product_name}")
            print(f"   Stock disponible: {current_stock}")
            print(f"   Quantit√© demand√©e: {quantity}")
            
            return False, f"Stock insuffisant pour {product_name} (disponible: {current_stock}, demand√©: {quantity})"
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du stock: {e}")
        return False, f"Erreur lors de la v√©rification du stock: {e}"


def process_payment_tool(order_id: str, amount: float, 
                        knowledge_base) -> Tuple[bool, str]:
    """
    Traite le paiement d'une commande
    
    Args:
        order_id: Identifiant de la commande
        amount: Montant √† payer
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        # R√©cup√®re les d√©tails de la commande
        order_details = knowledge_base.get_order_details(order_id)
        
        if not order_details:
            return False, f"Commande {order_id} non trouv√©e"
        
        # Simule parfois un √©chec de paiement (5% de chance)
        if random.random() < 0.05:
            knowledge_base.update_order_status(order_id, "annulee_paiement_echec")
            print(f"‚ùå √âchec du paiement pour la commande {order_id}")
            print(f"   Montant: {amount:.2f}‚Ç¨")
            return False, "√âchec du paiement - carte refus√©e"
        
        # Simule le traitement du paiement
        print(f"üí≥ Traitement du paiement pour la commande {order_id}")
        print(f"   Montant: {amount:.2f}‚Ç¨")
        
        # Met √† jour le statut de la commande
        knowledge_base.update_order_status(order_id, "payee")
        
        print(f"‚úÖ Paiement trait√© avec succ√®s pour la commande {order_id}")
        return True, "Paiement trait√© avec succ√®s"
        
    except Exception as e:
        print(f"‚ùå Erreur lors du traitement du paiement: {e}")
        return False, f"Erreur lors du traitement du paiement: {e}"


def update_order_status_tool(order_id: str, new_status: str, 
                           knowledge_base) -> bool:
    """
    Met √† jour le statut d'une commande
    
    Args:
        order_id: Identifiant de la commande
        new_status: Nouveau statut
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        bool: True si la mise √† jour a r√©ussi
    """
    try:
        # V√©rifie que la commande existe
        order_details = knowledge_base.get_order_details(order_id)
        
        if not order_details:
            print(f"‚ùå Commande {order_id} non trouv√©e")
            return False
        
        # Met √† jour le statut
        knowledge_base.update_order_status(order_id, new_status)
        
        print(f"‚úÖ Statut de la commande {order_id} mis √† jour: {new_status}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour du statut: {e}")
        return False


def get_product_details_tool(product_id: str, 
                           knowledge_base) -> Optional[Dict]:
    """
    R√©cup√®re les d√©tails d'un produit
    
    Args:
        product_id: Identifiant du produit
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Optional[Dict]: D√©tails du produit ou None si non trouv√©
    """
    try:
        product_details = knowledge_base.get_product_details(product_id)
        
        if product_details:
            print(f"üì¶ D√©tails du produit {product_id}:")
            for key, value in product_details.items():
                print(f"   {key}: {value}")
        
        return product_details
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des d√©tails: {e}")
        return None


def get_client_details_tool(client_id: str, knowledge_base, **kwargs) -> Optional[Dict]:
    """
    R√©cup√®re les d√©tails d'un client
    
    Args:
        client_id: Identifiant du client
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        Optional[Dict]: D√©tails du client ou None si non trouv√©
    """
    try:
        client_details = knowledge_base.get_client_details(client_id)
        
        if client_details:
            print(f"üë§ D√©tails du client {client_id}:")
            for key, value in client_details.items():
                print(f"   {key}: {value}")
        
        return client_details
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des d√©tails client: {e}")
        return None


def validate_order_tool(order_id: str, knowledge_base, **kwargs) -> Tuple[bool, str]:
    """
    Valide une commande selon les r√®gles m√©tier
    
    Args:
        order_id: Identifiant de la commande
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        # R√©cup√®re les d√©tails de la commande
        order_details = knowledge_base.get_order_details(order_id)
        
        if not order_details:
            return False, f"Commande {order_id} non trouv√©e"
        
        # R√©cup√®re les d√©tails du client
        client_id = order_details.get('hasClient', '')
        client_details = knowledge_base.get_client_details(client_id)
        
        # R√©cup√®re le montant
        amount = float(order_details.get('hasAmount', 0))
        
        # R√®gles de validation simples
        validation_rules = []
        
        # R√®gle 1: Montant minimum
        if amount < 10:
            validation_rules.append("Montant minimum non atteint (10‚Ç¨)")
        
        # R√®gle 2: Client valide
        if not client_details:
            validation_rules.append("Client non trouv√©")
        
        # R√®gle 3: Statut initial
        current_status = order_details.get('hasStatus', '')
        if current_status not in ['en_attente', 'nouvelle']:
            validation_rules.append(f"Statut invalide: {current_status}")
        
        # Si toutes les r√®gles sont respect√©es
        if not validation_rules:
            # Met √† jour le statut
            knowledge_base.update_order_status(order_id, "validee")
            
            print(f"‚úÖ Commande {order_id} valid√©e avec succ√®s")
            print(f"   Montant: {amount:.2f}‚Ç¨")
            print(f"   Client: {client_id}")
            
            return True, "Commande valid√©e avec succ√®s"
        else:
            print(f"‚ùå Commande {order_id} rejet√©e:")
            for rule in validation_rules:
                print(f"   - {rule}")
            
            return False, f"Commande rejet√©e: {'; '.join(validation_rules)}"
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la validation: {e}")
        return False, f"Erreur lors de la validation: {e}"


def recommend_products_tool(query_text: str, vector_store, 
                          knowledge_base, top_k: int = 3) -> List[Dict]:
    """
    Recommande des produits bas√©s sur une requ√™te textuelle
    
    Args:
        query_text: Texte de la requ√™te
        vector_store: Instance de VectorStore
        knowledge_base: Instance de KnowledgeBase
        top_k: Nombre de recommandations
    
    Returns:
        List[Dict]: Liste des produits recommand√©s
    """
    try:
        # Recherche des produits similaires
        similar_products = vector_store.search_similar_products(query_text, top_k)
        
        recommendations = []
        for product in similar_products:
            product_id = product['product_id']
            
            # R√©cup√®re les d√©tails complets du produit
            product_details = knowledge_base.get_product_details(product_id)
            
            if product_details:
                recommendation = {
                    'product_id': product_id,
                    'name': product_details.get('hasName', 'Produit inconnu'),
                    'price': product_details.get('hasPrice', 0),
                    'description': product_details.get('hasDescription', ''),
                    'stock': product_details.get('hasStock', 0),
                    'similarity_score': product['similarity_score']
                }
                recommendations.append(recommendation)
        
        if recommendations:
            print(f"üéØ Recommandations pour '{query_text}':")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec['name']} - {rec['price']}‚Ç¨ (score: {rec['similarity_score']:.2f})")
        
        return recommendations
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des recommandations: {e}")
        return []


def get_order_history_tool(client_id: str, knowledge_base, **kwargs) -> List[Dict]:
    """
    R√©cup√®re l'historique des commandes d'un client
    
    Args:
        client_id: Identifiant du client
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        List[Dict]: Historique des commandes
    """
    try:
        # R√©cup√®re toutes les commandes
        all_orders = []
        order_uris = knowledge_base.get_instances_of_class(
            "http://example.org/ontology/Order"
        )
        
        for order_uri in order_uris:
            order_id = str(order_uri).split('/')[-1]
            order_details = knowledge_base.get_order_details(order_id)
            
            if order_details and order_details.get('hasClient') == client_id:
                all_orders.append({
                    'order_id': order_id,
                    'amount': order_details.get('hasAmount', 0),
                    'status': order_details.get('hasStatus', 'inconnu'),
                    'date': order_details.get('hasDate', 'N/A')
                })
        
        # Trie par date (plus r√©cent en premier)
        all_orders.sort(key=lambda x: x['date'], reverse=True)
        
        print(f"üìã Historique des commandes pour le client {client_id}:")
        print(f"   Nombre de commandes: {len(all_orders)}")
        
        total_amount = sum(order['amount'] for order in all_orders)
        print(f"   Montant total: {total_amount:.2f}‚Ç¨")
        
        for order in all_orders[:5]:  # Affiche les 5 derni√®res
            print(f"   - {order['order_id']}: {order['amount']}‚Ç¨ ({order['status']})")
        
        if len(all_orders) > 5:
            print(f"   ... et {len(all_orders) - 5} autres commandes")
        
        return all_orders
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de l'historique: {e}")
        return []


def add_client_tool(name: str, email: str, knowledge_base) -> Tuple[bool, str]:
    """
    Ajoute un nouveau client dans la base de connaissances
    
    Args:
        name: Nom du client
        email: Email du client
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, message avec client_id si succ√®s)
    """
    try:
        # V√©rifie que l'email n'est pas d√©j√† utilis√©
        existing_clients = knowledge_base.get_instances_of_class(
            "http://example.org/ontology/Client"
        )
        
        for client_uri in existing_clients:
            client_details = knowledge_base.get_client_details(client_uri)
            if client_details and client_details.get('hasEmail') == email:
                return False, f"Un client avec l'email {email} existe d√©j√†"
        
        # G√©n√®re un ID unique pour le client
        client_id = f"client_{uuid.uuid4().hex[:8]}"
        
        # Ajoute le client dans la base de connaissances
        knowledge_base.add_client(client_id, name, email)
        
        print(f"‚úÖ Nouveau client ajout√©:")
        print(f"   ID: {client_id}")
        print(f"   Nom: {name}")
        print(f"   Email: {email}")
        
        return True, f"Client {name} ajout√© avec succ√®s (ID: {client_id})"
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout du client: {e}")
        return False, f"Erreur lors de l'ajout du client: {e}"


def list_clients_tool(knowledge_base, **kwargs) -> List[Dict]:
    """
    Liste tous les clients dans la base de connaissances
    
    Args:
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        List[Dict]: Liste des clients avec leurs d√©tails
    """
    try:
        # Utilise la m√©thode get_clients de la base de connaissances
        clients = knowledge_base.get_clients()
        
        print(f"üìã Liste des clients ({len(clients)} clients):")
        for client in clients:
            print(f"   - {client.get('name', 'N/A')} ({client.get('email', 'N/A')}) - ID: {client.get('id', 'N/A')}")
        
        return clients
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des clients: {e}")
        return []


# ===== OUTILS D'INTROSPECTION ET R√âFLEXIVIT√â =====

def introspect_ontology_tool(knowledge_base, **kwargs) -> Dict:
    """
    Introspection compl√®te de l'ontologie
    
    Args:
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        Dict: Structure compl√®te de l'ontologie
    """
    try:
        ontology_info = knowledge_base.introspect_ontology()
        
        print("üîç Introspection de l'ontologie:")
        print(f"   Classes: {len(ontology_info.get('classes', []))}")
        print(f"   Propri√©t√©s: {len(ontology_info.get('properties', []))}")
        print(f"   Namespaces: {len(ontology_info.get('namespaces', {}))}")
        
        for class_info in ontology_info.get('classes', []):
            print(f"   - {class_info['name']}: {class_info['instances_count']} instances")
        
        return ontology_info
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'introspection: {e}")
        return {}


def extend_ontology_tool(class_name: str, properties: List[Dict], 
                        knowledge_base, namespace: str = None) -> Tuple[bool, str]:
    """
    √âtend dynamiquement l'ontologie avec une nouvelle classe
    
    Args:
        class_name: Nom de la nouvelle classe
        properties: Liste des propri√©t√©s avec leurs types
        knowledge_base: Instance de KnowledgeBase
        namespace: Namespace personnalis√© (optionnel)
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        success = knowledge_base.extend_ontology_dynamically(class_name, properties, namespace)
        
        if success:
            return True, f"Classe '{class_name}' ajout√©e avec succ√®s √† l'ontologie"
        else:
            return False, f"√âchec de l'ajout de la classe '{class_name}'"
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extension de l'ontologie: {e}")
        return False, f"Erreur lors de l'extension: {e}"


def create_instance_tool(class_name: str, properties: Dict, 
                        knowledge_base, instance_id: str = None) -> Tuple[bool, str]:
    """
    Cr√©e dynamiquement une instance d'une classe
    
    Args:
        class_name: Nom de la classe
        properties: Dictionnaire des propri√©t√©s et valeurs
        knowledge_base: Instance de KnowledgeBase
        instance_id: ID personnalis√© (optionnel)
    
    Returns:
        Tuple[bool, str]: (succ√®s, message avec ID si succ√®s)
    """
    try:
        instance_id = knowledge_base.create_instance_dynamically(class_name, properties, instance_id)
        
        if instance_id:
            return True, f"Instance '{instance_id}' de type '{class_name}' cr√©√©e avec succ√®s"
        else:
            return False, f"√âchec de la cr√©ation de l'instance de type '{class_name}'"
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'instance: {e}")
        return False, f"Erreur lors de la cr√©ation: {e}"


def query_ontology_tool(query_type: str, knowledge_base, **kwargs) -> List[Dict]:
    """
    Requ√™te introspective de l'ontologie
    
    Args:
        query_type: Type de requ√™te ('classes', 'properties', 'instances', 'structure')
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres sp√©cifiques √† la requ√™te
    
    Returns:
        List[Dict]: R√©sultats de la requ√™te
    """
    try:
        results = knowledge_base.query_ontology_introspectively(query_type, **kwargs)
        
        print(f"üîç Requ√™te '{query_type}' - {len(results)} r√©sultats")
        
        if query_type == 'classes':
            for class_info in results:
                print(f"   - {class_info['name']}: {class_info['instances_count']} instances")
        elif query_type == 'properties':
            for prop_info in results:
                print(f"   - {prop_info['name']} ({prop_info['type']}): {prop_info['range']}")
        elif query_type == 'instances':
            for instance_info in results:
                print(f"   - {instance_info['id']} ({instance_info['class']})")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la requ√™te: {e}")
        return []


def get_all_orders_tool(knowledge_base, **kwargs) -> List[Dict]:
    """
    R√©cup√®re toutes les commandes dans la base de connaissances
    
    Args:
        knowledge_base: Instance de KnowledgeBase
        **kwargs: Param√®tres optionnels (ignor√©s pour cette fonction)
    
    Returns:
        List[Dict]: Liste des commandes avec leurs d√©tails
    """
    try:
        orders = []
        order_uris = knowledge_base.get_instances_of_class(
            "http://example.org/ontology/Order"
        )
        
        for order_uri in order_uris:
            order_id = str(order_uri).split('/')[-1]
            order_details = knowledge_base.get_order_details(order_id)
            if order_details:
                orders.append({
                    'order_id': order_id,
                    'client_id': order_details.get('hasClient', 'N/A'),
                    'amount': order_details.get('hasAmount', 'N/A'),
                    'status': order_details.get('hasStatus', 'N/A'),
                    'date': order_details.get('hasDate', 'N/A')
                })
        
        print(f"üìã Liste des commandes ({len(orders)} commandes):")
        for order in orders:
            print(f"   - {order['order_id']}: {order['amount']}‚Ç¨ ({order['status']})")
        
        return orders
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des commandes: {e}")
        return []


def add_behavior_class_tool(class_name: str, methods: List[Dict], 
                           knowledge_base) -> Tuple[bool, str]:
    """
    Ajoute une classe avec des comportements (m√©thodes)
    
    Args:
        class_name: Nom de la classe
        methods: Liste des m√©thodes avec leurs param√®tres et types de retour
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        success = knowledge_base.add_behavior_class(class_name, methods)
        
        if success:
            print(f"‚úÖ Classe comportementale '{class_name}' cr√©√©e avec succ√®s")
            print(f"   M√©thodes ajout√©es: {len(methods)}")
            for method in methods:
                print(f"     - {method['name']}")
                if 'parameters' in method:
                    params = [p['name'] for p in method['parameters']]
                    print(f"       Param√®tres: {', '.join(params)}")
                if 'return_type' in method:
                    print(f"       Retour: {method['return_type']}")
            
            return True, f"Classe comportementale '{class_name}' ajout√©e avec succ√®s"
        else:
            return False, f"Erreur lors de la cr√©ation de la classe comportementale '{class_name}'"
            
    except Exception as e:
        return False, f"Erreur: {e}"


def add_state_machine_tool(class_name: str, states: List[str], 
                          transitions: List[Dict], 
                          knowledge_base) -> Tuple[bool, str]:
    """
    Ajoute une machine √† √©tats pour une classe
    
    Args:
        class_name: Nom de la classe
        states: Liste des √©tats possibles
        transitions: Liste des transitions
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, message)
    """
    try:
        success = knowledge_base.add_state_machine(class_name, states, transitions)
        
        if success:
            print(f"‚úÖ Machine √† √©tats pour '{class_name}' cr√©√©e avec succ√®s")
            print(f"   √âtats: {', '.join(states)}")
            print(f"   Transitions: {len(transitions)}")
            for trans in transitions:
                trigger = trans.get('trigger', 'automatique')
                print(f"     - {trans['from']} -> {trans['to']} (trigger: {trigger})")
            
            return True, f"Machine √† √©tats pour '{class_name}' ajout√©e avec succ√®s"
        else:
            return False, f"Erreur lors de la cr√©ation de la machine √† √©tats pour '{class_name}'"
            
    except Exception as e:
        return False, f"Erreur: {e}"


def execute_behavior_tool(instance_id: str, method_name: str, 
                         parameters: Dict, knowledge_base) -> Tuple[bool, str]:
    """
    Ex√©cute un comportement (m√©thode) sur une instance
    
    Args:
        instance_id: ID de l'instance
        method_name: Nom de la m√©thode √† ex√©cuter
        parameters: Param√®tres de la m√©thode
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, r√©sultat)
    """
    try:
        # R√©cup√®re les d√©tails de l'instance
        instance_details = knowledge_base.get_instance_details(instance_id)
        if not instance_details:
            return False, f"Instance '{instance_id}' non trouv√©e"
        
        # Simule l'ex√©cution du comportement
        print(f"üîÑ Ex√©cution de '{method_name}' sur l'instance '{instance_id}'")
        print(f"   Param√®tres: {parameters}")
        
        # Logique d'ex√©cution selon la m√©thode
        if method_name == "passer_commande":
            # Simulation de cr√©ation de commande
            order_id = f"order_{uuid.uuid4().hex[:8]}"
            result = f"Commande cr√©√©e: {order_id}"
            
        elif method_name == "payer":
            # Simulation de paiement
            amount = parameters.get('montant', 0)
            result = f"Paiement de {amount}‚Ç¨ trait√©"
            
        elif method_name == "changer_etat":
            # Simulation de changement d'√©tat
            new_state = parameters.get('nouvel_etat', 'inconnu')
            result = f"√âtat chang√© vers: {new_state}"
            
        else:
            result = f"M√©thode '{method_name}' ex√©cut√©e avec succ√®s"
        
        print(f"   R√©sultat: {result}")
        return True, result
        
    except Exception as e:
        return False, f"Erreur lors de l'ex√©cution: {e}"


def create_semantic_proxy_tool(knowledge_base, class_name: str, instance_id: str = None) -> Tuple[bool, str]:
    """
    Cr√©e un proxy s√©mantique pour une classe ou une instance
    
    Args:
        knowledge_base: Instance de KnowledgeBase
        class_name: Nom de la classe
        instance_id: ID de l'instance (optionnel)
    
    Returns:
        Tuple[bool, str]: (succ√®s, message avec proxy_id)
    """
    try:
        from knowledge_base import SemanticProxy
        
        proxy_manager = SemanticProxy(knowledge_base)
        proxy = proxy_manager.create_proxy(class_name, instance_id)
        
        if proxy:
            proxy_id = f"proxy_{class_name}_{instance_id or 'class'}"
            return True, f"Proxy s√©mantique cr√©√©: {proxy_id}"
        else:
            return False, "Erreur lors de la cr√©ation du proxy"
            
    except Exception as e:
        return False, f"Erreur: {e}"


def execute_method_reflection_tool(proxy_id: str, method_name: str, 
                                  parameters: Dict, knowledge_base) -> Tuple[bool, str]:
    """
    Ex√©cute une m√©thode par r√©flexion via un proxy s√©mantique
    
    Args:
        proxy_id: ID du proxy
        method_name: Nom de la m√©thode
        parameters: Param√®tres de la m√©thode
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, r√©sultat)
    """
    try:
        from knowledge_base import SemanticProxy
        
        # Parse le proxy_id pour extraire class_name et instance_id
        parts = proxy_id.replace('proxy_', '').split('_')
        if len(parts) >= 2:
            class_name = parts[0]
            instance_id = '_'.join(parts[1:]) if len(parts) > 1 else None
        else:
            return False, "Format de proxy_id invalide"
        
        proxy_manager = SemanticProxy(knowledge_base)
        proxy = proxy_manager.get_proxy(class_name, instance_id)
        
        if not proxy:
            proxy = proxy_manager.create_proxy(class_name, instance_id)
        
        if proxy:
            # Ex√©cute la m√©thode par r√©flexion
            result = proxy._execute_method(method_name, **parameters)
            return True, f"R√©sultat: {result}"
        else:
            return False, "Proxy non trouv√©"
            
    except Exception as e:
        return False, f"Erreur lors de l'ex√©cution: {e}"


def reflect_class_tool(class_name: str, knowledge_base) -> Tuple[bool, str]:
    """
    Effectue une r√©flexion compl√®te sur une classe
    
    Args:
        class_name: Nom de la classe
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, structure de la classe)
    """
    try:
        from knowledge_base import SemanticProxy
        
        proxy_manager = SemanticProxy(knowledge_base)
        structure = proxy_manager.reflect_class_structure(class_name)
        
        if structure:
            # Formatage de la sortie
            output = f"üîç R√©flexion sur la classe '{class_name}':\n"
            output += f"   URI: {structure.get('class_uri', 'N/A')}\n"
            output += f"   Propri√©t√©s: {', '.join(structure.get('properties', []))}\n"
            output += f"   M√©thodes: {len(structure.get('methods', []))}\n"
            output += f"   Instances: {structure.get('instances_count', 0)}\n"
            
            # D√©tail des m√©thodes
            for method in structure.get('methods', []):
                output += f"     - {method['name']}"
                if method.get('parameters'):
                    params = [p['name'] for p in method['parameters']]
                    output += f"({', '.join(params)})"
                if method.get('return_type'):
                    output += f" -> {method['return_type']}"
                output += "\n"
            
            return True, output
        else:
            return False, f"Classe '{class_name}' non trouv√©e"
            
    except Exception as e:
        return False, f"Erreur lors de la r√©flexion: {e}"


def instantiate_by_reflection_tool(class_name: str, properties: Dict, 
                                  knowledge_base) -> Tuple[bool, str]:
    """
    Instancie un objet par r√©flexion
    
    Args:
        class_name: Nom de la classe
        properties: Propri√©t√©s de l'instance
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, instance_id)
    """
    try:
        # V√©rifie que la classe existe
        class_uri = f"{knowledge_base.ns['ex']}{class_name}"
        if not knowledge_base.class_exists(class_uri):
            return False, f"Classe '{class_name}' non trouv√©e"
        
        # Cr√©e l'instance par r√©flexion
        instance_id = knowledge_base.create_instance_dynamically(class_name, properties)
        
        if instance_id:
            # Cr√©e automatiquement un proxy pour cette instance
            from knowledge_base import SemanticProxy
            proxy_manager = SemanticProxy(knowledge_base)
            proxy = proxy_manager.create_proxy(class_name, instance_id)
            
            return True, f"Instance cr√©√©e par r√©flexion: {instance_id}"
        else:
            return False, "Erreur lors de la cr√©ation de l'instance"
            
    except Exception as e:
        return False, f"Erreur: {e}"


def list_proxy_methods_tool(class_name: str, knowledge_base) -> Tuple[bool, str]:
    """
    Liste toutes les m√©thodes disponibles pour un proxy
    
    Args:
        class_name: Nom de la classe
        knowledge_base: Instance de KnowledgeBase
    
    Returns:
        Tuple[bool, str]: (succ√®s, liste des m√©thodes)
    """
    try:
        from knowledge_base import SemanticProxy
        
        proxy_manager = SemanticProxy(knowledge_base)
        methods = proxy_manager.list_available_methods(class_name)
        
        if methods:
            output = f"üìã M√©thodes disponibles pour '{class_name}':\n"
            for method in methods:
                output += f"   - {method['name']}"
                if method.get('parameters'):
                    params = [p['name'] for p in method['parameters']]
                    output += f"({', '.join(params)})"
                if method.get('return_type'):
                    output += f" -> {method['return_type']}"
                output += "\n"
            
            return True, output
        else:
            return False, f"Aucune m√©thode trouv√©e pour '{class_name}'"
            
    except Exception as e:
        return False, f"Erreur: {e}" 