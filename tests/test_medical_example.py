#!/usr/bin/env python3
"""
Test de l'exemple m√©dical
V√©rifie que l'exemple m√©dical fonctionne correctement
"""

import sys
import os
import json
import yaml
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import des modules du syst√®me
from src.knowledge_base import KnowledgeBase
from src.vector_store import VectorStore
from src.llm_assistants import LLMAssistant

import requests
import time

# Configuration
API_BASE_URL = "http://localhost:5001"

def test_medical_workflow():
    """Teste la g√©n√©ration de workflow m√©dical"""
    print("üè• Test de g√©n√©ration de workflow m√©dical...")
    
    workflow_data = {
        "domain": "healthcare",
        "business_context": """
        Syst√®me de gestion de consultations m√©dicales avec :
        - Prise de rendez-vous patients
        - Validation des dossiers m√©dicaux
        - Conduite de consultations
        - Mise √† jour des dossiers
        - Prescription de m√©dicaments
        - Suivi des traitements
        """
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/llm/generate_workflow",
            json=workflow_data,
            headers={'Content-Type': 'application/json'}
        )
        data = response.json()
        
        if data['success']:
            print("‚úÖ Workflow m√©dical g√©n√©r√© avec succ√®s")
            print(f"   Nombre d'√©tapes: {len(data['workflow'])}")
            print("\nüìã √âtapes du workflow:")
            for i, step in enumerate(data['workflow'], 1):
                print(f"   {i}. {step.get('action', 'N/A')}")
                print(f"      Description: {step.get('description', 'N/A')}")
                print(f"      Param√®tres: {', '.join(step.get('params', []))}")
                print()
        else:
            print(f"‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_medical_patterns():
    """Teste la g√©n√©ration de patterns d'extraction m√©dicaux"""
    print("\nüîç Test de g√©n√©ration de patterns m√©dicaux...")
    
    pattern_data = {
        "entity_type": "Patient",
        "sample_data": """
        Nom: Marie Dupont
        Date de naissance: 15/03/1985
        Num√©ro de s√©curit√© sociale: 185031512345678
        T√©l√©phone: +33 1 23 45 67 89
        Email: marie.dupont@email.com
        Adresse: 123 Rue de la Sant√©, 75001 Paris
        Groupe sanguin: A+
        Allergies: P√©nicilline, Pollen
        Ant√©c√©dents: Hypertension, Diab√®te type 2
        """
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/llm/generate_patterns",
            json=pattern_data,
            headers={'Content-Type': 'application/json'}
        )
        data = response.json()
        
        if data['success']:
            print("‚úÖ Patterns m√©dicaux g√©n√©r√©s avec succ√®s")
            print(f"   Nombre de patterns: {len(data['patterns'])}")
            print("\nüîç Patterns d'extraction:")
            for i, pattern in enumerate(data['patterns'], 1):
                print(f"   {i}. {pattern.get('name', 'N/A')}")
                print(f"      Description: {pattern.get('description', 'N/A')}")
                print(f"      Patterns: {pattern.get('patterns', [])}")
                print(f"      Exemples: {pattern.get('examples', [])}")
                print()
        else:
            print(f"‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_medical_rules():
    """Teste la g√©n√©ration de r√®gles m√©tier m√©dicales"""
    print("\nüìã Test de g√©n√©ration de r√®gles m√©dicales...")
    
    rule_data = {
        "business_scenario": """
        Gestion des consultations m√©dicales avec validation automatique des prescriptions
        et suivi des protocoles de s√©curit√© m√©dicale
        """,
        "constraints": [
            "Les patients mineurs n√©cessitent l'autorisation parentale",
            "Les prescriptions de m√©dicaments contr√¥l√©s n√©cessitent une validation sp√©ciale",
            "Les patients avec allergies doivent √™tre signal√©s avant toute prescription",
            "Les consultations d'urgence ont priorit√© sur les consultations programm√©es",
            "Les dossiers m√©dicaux doivent √™tre mis √† jour apr√®s chaque consultation"
        ]
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/llm/generate_rules",
            json=rule_data,
            headers={'Content-Type': 'application/json'}
        )
        data = response.json()
        
        if data['success']:
            print("‚úÖ R√®gles m√©dicales g√©n√©r√©es avec succ√®s")
            print(f"   Nombre de r√®gles: {len(data['rules'])}")
            print("\n‚öñÔ∏è R√®gles m√©tier:")
            for i, rule in enumerate(data['rules'], 1):
                print(f"   {i}. {rule.get('name', 'N/A')}")
                print(f"      Condition: {rule.get('condition', 'N/A')}")
                print(f"      Action: {rule.get('action', 'N/A')}")
                print(f"      Description: {rule.get('description', 'N/A')}")
                print(f"      Priorit√©: {rule.get('priority', 'N/A')}")
                print()
        else:
            print(f"‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_medical_templates():
    """Teste la r√©cup√©ration des templates m√©dicaux"""
    print("\nüìù Test de r√©cup√©ration des templates m√©dicaux...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/llm/assistants/templates")
        data = response.json()
        
        if data['success']:
            print("‚úÖ Templates r√©cup√©r√©s avec succ√®s")
            templates = data['templates']
            
            if 'workflow_templates' in templates:
                print(f"   Templates de workflow: {len(templates['workflow_templates'])}")
                for template in templates['workflow_templates']:
                    print(f"      - {template}")
            
            if 'pattern_templates' in templates:
                print(f"   Templates de patterns: {len(templates['pattern_templates'])}")
                for template in templates['pattern_templates']:
                    print(f"      - {template}")
            
            if 'rule_templates' in templates:
                print(f"   Templates de r√®gles: {len(templates['rule_templates'])}")
                for template in templates['rule_templates']:
                    print(f"      - {template}")
        else:
            print(f"‚ùå Erreur: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_medical_validation():
    """Teste la validation de contenu m√©dical"""
    print("\n‚úÖ Test de validation de contenu m√©dical...")
    
    test_content = {
        "output_type": "workflow",
        "content": {
            "steps": [
                {
                    "action": "validate_patient",
                    "description": "Validation du dossier patient",
                    "params": ["patient_id"]
                },
                {
                    "action": "check_appointment",
                    "description": "V√©rification du rendez-vous",
                    "params": ["appointment_id"]
                },
                {
                    "action": "conduct_consultation",
                    "description": "Conduite de la consultation m√©dicale",
                    "params": ["patient_data", "consultation_type"]
                }
            ]
        }
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/llm/assistants/validate",
            json=test_content,
            headers={'Content-Type': 'application/json'}
        )
        data = response.json()
        
        if data['success']:
            print("‚úÖ Validation r√©ussie")
            validation = data['validation']
            print(f"   Valide: {validation.get('is_valid', 'N/A')}")
            if 'errors' in validation and validation['errors']:
                print(f"   Erreurs: {validation['errors']}")
            if 'warnings' in validation and validation['warnings']:
                print(f"   Avertissements: {validation['warnings']}")
        else:
            print(f"‚ùå Erreur de validation: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_medical_configuration():
    """Teste la configuration pour le domaine m√©dical"""
    print("\nüîß Test de configuration m√©dicale...")
    
    config = {
        "api_key": "test-medical-key",
        "model": "gpt-4",
        "temperature": 0.3  # Plus conservateur pour le m√©dical
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/llm/assistants/configure",
            json=config,
            headers={'Content-Type': 'application/json'}
        )
        data = response.json()
        
        if data['success']:
            print("‚úÖ Configuration m√©dicale r√©ussie")
            print("   Mod√®le configur√© pour la pr√©cision m√©dicale")
        else:
            print(f"‚ùå Erreur de configuration: {data.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def main():
    """Fonction principale de test m√©dical"""
    print("üè• Test des Assistants LLM - Domaine M√©dical")
    print("=" * 60)
    
    # Attendre que l'API soit pr√™te
    print("‚è≥ Attente du d√©marrage de l'API...")
    time.sleep(2)
    
    # Tests s√©quentiels
    test_medical_configuration()
    test_medical_workflow()
    test_medical_patterns()
    test_medical_rules()
    test_medical_templates()
    test_medical_validation()
    
    print("\n" + "=" * 60)
    print("‚úÖ Tests m√©dicaux termin√©s")
    print("\nüí° R√©sultats attendus:")
    print("   - Workflow: √âtapes de consultation m√©dicale")
    print("   - Patterns: Extraction de donn√©es patient")
    print("   - R√®gles: Validation et s√©curit√© m√©dicale")
    print("   - Templates: Mod√®les sp√©cifiques au domaine m√©dical")

if __name__ == "__main__":
    main() 