#!/usr/bin/env python3
"""
Test d'int√©gration des outils avec l'agent
V√©rifie que l'agent utilise correctement les vrais outils
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.knowledge_base import KnowledgeBase
from src.vector_store import VectorStore
from src.llm_interface import LLMInterface
from src.agent import CognitiveOrderAgent
import tools
import json


def test_initialisation():
    """Test de l'initialisation du syst√®me avec int√©gration des outils"""
    print("üß™ TEST 1: INITIALISATION AVEC INT√âGRATION DES OUTILS")
    print("=" * 60)
    
    try:
        # Initialisation des composants
        kb = KnowledgeBase()
        vector_store = VectorStore()
        llm = LLMInterface()
        agent = CognitiveOrderAgent(kb, vector_store, llm)
        
        print("‚úÖ Composants initialis√©s avec succ√®s")
        print(f"   - Knowledge Base: {type(kb).__name__}")
        print(f"   - Vector Store: {type(vector_store).__name__}")
        print(f"   - LLM Interface: {type(llm).__name__}")
        print(f"   - Agent: {type(agent).__name__}")
        
        # V√©rification que le moteur de r√®gles a acc√®s √† la base de connaissances
        if agent.rule_engine.knowledge_base:
            print("‚úÖ Moteur de r√®gles connect√© √† la base de connaissances")
        else:
            print("‚ùå Moteur de r√®gles non connect√© √† la base de connaissances")
            return None, None, None, None
        
        return kb, vector_store, llm, agent
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return None, None, None, None


def test_tools_integration():
    """Test de l'int√©gration des outils dans l'agent"""
    print("\nüß™ TEST 2: INT√âGRATION DES OUTILS")
    print("=" * 60)
    
    kb, vector_store, llm, agent = test_initialisation()
    if not agent:
        return False
    
    try:
        # Ajout de donn√©es de test
        print("üìö Ajout de donn√©es de test...")
        
        # Ajout de produits
        kb.add_product("laptop_001", "Laptop Gaming", 1200.0, 15, "Ordinateur portable gaming haute performance")
        kb.add_product("mouse_001", "Souris Gaming", 45.0, 50, "Souris gaming avec capteur optique")
        kb.add_product("keyboard_001", "Clavier M√©canique", 120.0, 25, "Clavier m√©canique RGB")
        
        # Ajout de clients
        kb.add_client("client_001", "John Doe", "john.doe@email.com")
        kb.add_client("client_002", "Jane Smith", "jane.smith@email.com")
        
        print("‚úÖ Donn√©es de test ajout√©es")
        
        # Test 1: V√©rification que l'agent utilise les outils pour le stock
        print("\nüîç Test 1: V√©rification de l'utilisation des outils de stock")
        
        # Requ√™te qui devrait d√©clencher la v√©rification de stock
        query = "Je veux commander 5 laptops gaming"
        
        print(f"   Requ√™te: '{query}'")
        response = agent.run_agent(query)
        
        print(f"   R√©ponse: {response[:200]}...")
        
        # V√©rification que les outils ont √©t√© appel√©s
        # On peut v√©rifier en regardant les logs ou en interceptant les appels
        
        # Test 2: V√©rification directe des outils
        print("\nüîç Test 2: V√©rification directe des outils")
        
        # Test de l'outil de v√©rification de stock
        success, message = tools.check_stock_tool("laptop_001", 3, kb)
        print(f"   V√©rification stock (3 laptops): {'‚úÖ' if success else '‚ùå'} {message}")
        
        # Test de l'outil de cr√©ation de commande
        items = [
            {'product_id': 'laptop_001', 'quantity': 2, 'price': 1200.0, 'total': 2400.0},
            {'product_id': 'mouse_001', 'quantity': 1, 'price': 45.0, 'total': 45.0}
        ]
        order_id = tools.create_order_tool("client_001", items, kb)
        print(f"   Cr√©ation commande: {'‚úÖ' if order_id else '‚ùå'} {order_id}")
        
        # Test de l'outil de validation de commande
        if order_id:
            success, message = tools.validate_order_tool(order_id, kb)
            print(f"   Validation commande: {'‚úÖ' if success else '‚ùå'} {message}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")
        return False


def test_rule_engine_tools():
    """Test que le moteur de r√®gles utilise les vrais outils"""
    print("\nüß™ TEST 3: MOTEUR DE R√àGLES ET OUTILS")
    print("=" * 60)
    
    kb, vector_store, llm, agent = test_initialisation()
    if not agent:
        return False
    
    try:
        # Ajout de donn√©es de test si pas d√©j√† fait
        if not kb.find_product_by_name("Laptop Gaming"):
            kb.add_product("laptop_001", "Laptop Gaming", 1200.0, 15, "Ordinateur portable gaming")
        
        # Test du moteur de r√®gles directement
        print("üîß Test du moteur de r√®gles avec outils...")
        
        # Requ√™te qui devrait d√©clencher la r√®gle de v√©rification de stock
        query = "Je veux commander 3 produits avec livraison express"
        
        rule_result = agent.rule_engine.process_query(query)
        
        print(f"   Intention d√©tect√©e: {rule_result.get('intent', 'N/A')}")
        print(f"   Entit√©s extraites: {rule_result.get('entities', {})}")
        print(f"   Confiance: {rule_result.get('confidence', 0):.2f}")
        
        # V√©rification des actions ex√©cut√©es
        executed_actions = rule_result.get('executed_actions', [])
        print(f"   Actions ex√©cut√©es: {len(executed_actions)}")
        
        for action_info in executed_actions:
            action = action_info['action']
            result = action_info['result']
            rule = action_info['rule']
            
            print(f"     - R√®gle '{rule}' ‚Üí Action '{action}'")
            print(f"       R√©sultat: {result.get('status', 'N/A')}")
            
            # V√©rification que les r√©sultats viennent des vrais outils
            if action == 'check_stock':
                if 'product_id' in result and 'product_name' in result:
                    print(f"       ‚úÖ Utilise les vrais outils (produit: {result['product_name']})")
                else:
                    print(f"       ‚ùå N'utilise pas les vrais outils")
            
            elif action == 'calculate_price':
                if 'unit_price' in result and 'total_price' in result:
                    print(f"       ‚úÖ Utilise les vrais outils (prix: {result['total_price']}‚Ç¨)")
                else:
                    print(f"       ‚ùå N'utilise pas les vrais outils")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du moteur de r√®gles: {e}")
        return False


def test_agent_tools_usage():
    """Test que l'agent utilise les outils dans ses handlers"""
    print("\nüß™ TEST 4: UTILISATION DES OUTILS DANS LES HANDLERS")
    print("=" * 60)
    
    kb, vector_store, llm, agent = test_initialisation()
    if not agent:
        return False
    
    try:
        # Ajout de donn√©es de test
        if not kb.find_product_by_name("Laptop Gaming"):
            kb.add_product("laptop_001", "Laptop Gaming", 1200.0, 15, "Ordinateur portable gaming")
        if not kb.find_client_by_name("John Doe"):
            kb.add_client("client_001", "John Doe", "john.doe@email.com")
        
        # Test 1: Handler create_order avec outils
        print("üîç Test du handler create_order...")
        
        params = {
            'client_name': 'John Doe',
            'products': [
                {'product_name': 'Laptop Gaming', 'quantity': 2}
            ]
        }
        
        response = agent._handle_create_order(params)
        print(f"   R√©ponse: {response[:200]}...")
        
        # V√©rification que la r√©ponse contient des informations r√©alistes
        if "Commande" in response and "‚Ç¨" in response:
            print("   ‚úÖ Handler utilise les vrais outils (informations r√©alistes)")
        else:
            print("   ‚ùå Handler n'utilise pas les vrais outils")
        
        # Test 2: Handler validate_order avec outils
        print("\nüîç Test du handler validate_order...")
        
        # Cr√©er une commande d'abord
        items = [
            {'product_id': 'laptop_001', 'quantity': 1, 'price': 1200.0, 'total': 1200.0}
        ]
        order_id = tools.create_order_tool("client_001", items, kb)
        
        if order_id:
            params = {'order_id': order_id}
            response = agent._handle_validate_order(params)
            print(f"   R√©ponse: {response[:200]}...")
            
            # V√©rification que la r√©ponse contient des informations r√©alistes
            if "valid√©e" in response or "pay√©e" in response:
                print("   ‚úÖ Handler utilise les vrais outils")
            else:
                print("   ‚ùå Handler n'utilise pas les vrais outils")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des handlers: {e}")
        return False


def test_tools_consistency():
    """Test de la coh√©rence entre les outils et l'agent"""
    print("\nüß™ TEST 5: COH√âRENCE DES OUTILS")
    print("=" * 60)
    
    kb, vector_store, llm, agent = test_initialisation()
    if not agent:
        return False
    
    try:
        # Ajout de donn√©es de test
        if not kb.find_product_by_name("Laptop Gaming"):
            kb.add_product("laptop_001", "Laptop Gaming", 1200.0, 15, "Ordinateur portable gaming")
        if not kb.find_client_by_name("John Doe"):
            kb.add_client("client_001", "John Doe", "john.doe@email.com")
        
        # Test de coh√©rence: m√™me produit, m√™me r√©sultat
        print("üîç Test de coh√©rence des outils...")
        
        # V√©rification directe du stock
        success1, message1 = tools.check_stock_tool("laptop_001", 3, kb)
        print(f"   Outil direct - Stock 3 laptops: {'‚úÖ' if success1 else '‚ùå'} {message1}")
        
        # V√©rification via le moteur de r√®gles
        rule_result = agent.rule_engine.process_query("Je veux commander 3 laptops")
        stock_actions = [a for a in rule_result.get('executed_actions', []) 
                        if a['action'] == 'check_stock']
        
        if stock_actions:
            stock_result = stock_actions[0]['result']
            print(f"   Moteur r√®gles - Stock 3 laptops: {stock_result.get('status', 'N/A')}")
            
            # V√©rification de la coh√©rence
            if (success1 and stock_result.get('status') == 'available') or \
               (not success1 and stock_result.get('status') == 'insufficient'):
                print("   ‚úÖ Coh√©rence entre outils directs et moteur de r√®gles")
            else:
                print("   ‚ùå Incoh√©rence entre outils directs et moteur de r√®gles")
        else:
            print("   ‚ö†Ô∏è Aucune action de v√©rification de stock trouv√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de coh√©rence: {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üîß TEST D'INT√âGRATION DES OUTILS DANS L'AGENT")
    print("=" * 70)
    print("Ce test v√©rifie que l'agent utilise bien les vrais outils")
    print("au lieu de simulations pour les op√©rations m√©tier.")
    print("=" * 70)
    
    # Tests
    tests = [
        ("Int√©gration des outils", lambda: test_tools_integration()),
        ("Moteur de r√®gles et outils", lambda: test_rule_engine_tools()),
        ("Handlers et outils", lambda: test_agent_tools_usage()),
        ("Coh√©rence des outils", lambda: test_tools_consistency())
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans le test '{test_name}': {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DES TESTS D'INT√âGRATION")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:30} : {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ Tous les tests d'int√©gration des outils sont pass√©s !")
        print("   L'agent utilise correctement les vrais outils.")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©.")
        print("   V√©rifiez l'int√©gration des outils dans l'agent.")


if __name__ == "__main__":
    main() 