#!/usr/bin/env python3
"""
Test du gestionnaire de configuration
V√©rifie que la gestion des configurations fonctionne correctement
"""

import sys
import os
import json
import yaml
import tempfile
from pathlib import Path
from datetime import datetime
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config_manager import ConfigurationManager
from src.core.rule_engine import AdvancedRuleEngine, BusinessRule
from src.knowledge_base import KnowledgeBase
from src.vector_store import VectorStore


def create_test_configuration():
    """Cr√©e une configuration de test compl√®te"""
    
    print("üîß Cr√©ation d'une configuration de test...")
    
    # Cr√©ation des instances
    rule_engine = AdvancedRuleEngine()
    knowledge_base = KnowledgeBase()
    vector_store = VectorStore()
    
    # Ajout de r√®gles de test
    rule1 = BusinessRule(
        name="R√®gle Commande Express",
        description="Gestion des commandes express avec livraison prioritaire",
        conditions={
            "intent": "commander",
            "delivery_type": "express",
            "amount": {"operator": ">=", "value": 50}
        },
        actions=[
            {"action": "check_stock", "params": {"product_id": "{product_id}"}},
            {"action": "process_payment", "params": {"amount": "{amount}"}},
            {"action": "schedule_delivery", "params": {"type": "express"}}
        ],
        priority=1,
        category="commande"
    )
    
    rule2 = BusinessRule(
        name="R√®gle Remise Fid√©lit√©",
        description="Application de remise pour clients fid√®les",
        conditions={
            "intent": "commander",
            "customer_type": "fid√®le",
            "amount": {"operator": ">=", "value": 100}
        },
        actions=[
            {"action": "apply_discount", "params": {"percentage": 10}},
            {"action": "process_payment", "params": {"amount": "{amount_with_discount}"}}
        ],
        priority=2,
        category="fid√©lit√©"
    )
    
    rule_engine.add_business_rule(rule1)
    rule_engine.add_business_rule(rule2)
    
    # Configuration LLM
    llm_config = {
        "model": "gpt-3.5-turbo",
        "temperature": 0.7,
        "max_tokens": 1000,
        "api_key_configured": True
    }
    
    # Configuration des outils
    tools_config = {
        "stock_api": {
            "enabled": True,
            "endpoint": "http://localhost:5001/api/tools/stock",
            "timeout": 30
        },
        "payment_api": {
            "enabled": True,
            "endpoint": "http://localhost:5001/api/tools/payment",
            "timeout": 60
        },
        "delivery_api": {
            "enabled": True,
            "endpoint": "http://localhost:5001/api/tools/delivery",
            "timeout": 45
        }
    }
    
    # Configuration de l'agent
    agent_config = {
        "intent_patterns": {
            "commander": ["commander", "acheter", "passer commande"],
            "consulter": ["consulter", "voir", "afficher"],
            "annuler": ["annuler", "supprimer", "retirer"]
        },
        "fallback_enabled": True,
        "confidence_threshold": 0.7,
        "max_actions_per_query": 5
    }
    
    return rule_engine, knowledge_base, vector_store, llm_config, tools_config, agent_config


def test_export_configuration():
    """Test de l'export de configuration"""
    
    print("\nüì§ Test d'export de configuration...")
    
    # Cr√©ation du gestionnaire
    config_manager = ConfigurationManager("test_configs")
    
    # Cr√©ation de la configuration de test
    rule_engine, kb, vs, llm_config, tools_config, agent_config = create_test_configuration()
    
    try:
        # Export en JSON
        json_file = config_manager.export_configuration(
            rule_engine=rule_engine,
            knowledge_base=kb,
            vector_store=vs,
            llm_config=llm_config,
            tools_config=tools_config,
            agent_config=agent_config,
            format='json',
            filename='test_config_complete.json'
        )
        print(f"‚úÖ Configuration export√©e en JSON: {json_file}")
        
        # Export en YAML
        yaml_file = config_manager.export_configuration(
            rule_engine=rule_engine,
            knowledge_base=kb,
            vector_store=vs,
            llm_config=llm_config,
            tools_config=tools_config,
            agent_config=agent_config,
            format='yaml',
            filename='test_config_complete.yaml'
        )
        print(f"‚úÖ Configuration export√©e en YAML: {yaml_file}")
        
        return json_file, yaml_file
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")
        return None, None


def test_import_configuration(json_file, yaml_file):
    """Test de l'import de configuration"""
    
    print("\nüì• Test d'import de configuration...")
    
    config_manager = ConfigurationManager("test_configs")
    
    try:
        # Import depuis JSON
        print("Import depuis JSON...")
        json_config = config_manager.import_configuration(json_file)
        print(f"‚úÖ Configuration JSON import√©e: {json_config['name']}")
        print(f"   Version: {json_config['version']}")
        print(f"   R√®gles: {len(json_config['rule_engine']['business_rules'])}")
        
        # Import depuis YAML
        print("Import depuis YAML...")
        yaml_config = config_manager.import_configuration(yaml_file)
        print(f"‚úÖ Configuration YAML import√©e: {yaml_config['name']}")
        print(f"   Version: {yaml_config['version']}")
        print(f"   R√®gles: {len(yaml_config['rule_engine']['business_rules'])}")
        
        return json_config, yaml_config
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {e}")
        return None, None


def test_apply_configuration(json_config, yaml_config):
    """Test de l'application de configuration"""
    
    print("\nüîß Test d'application de configuration...")
    
    config_manager = ConfigurationManager("test_configs")
    
    # Cr√©ation d'instances vides
    rule_engine = AdvancedRuleEngine()
    knowledge_base = KnowledgeBase()
    vector_store = VectorStore()
    
    try:
        # Application de la configuration JSON
        print("Application de la configuration JSON...")
        success = config_manager.apply_configuration(json_config, rule_engine, knowledge_base, vector_store)
        
        if success:
            print(f"‚úÖ Configuration JSON appliqu√©e avec succ√®s")
            print(f"   R√®gles charg√©es: {len(rule_engine.business_rules)}")
            
            # Affichage des r√®gles appliqu√©es
            for rule in rule_engine.business_rules:
                print(f"   - {rule.name} ({rule.category})")
        else:
            print("‚ùå Erreur lors de l'application de la configuration JSON")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application: {e}")


def test_list_configurations():
    """Test de la liste des configurations"""
    
    print("\nüìã Test de la liste des configurations...")
    
    config_manager = ConfigurationManager("test_configs")
    
    try:
        configs = config_manager.list_configurations()
        print(f"‚úÖ Configurations trouv√©es: {len(configs)}")
        
        for config in configs:
            print(f"   üìÑ {config['filename']}")
            print(f"      Nom: {config['name']}")
            print(f"      Format: {config['format']}")
            print(f"      Taille: {config['size']} bytes")
            print(f"      Modifi√©: {config['updated_at']}")
            print()
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la liste: {e}")


def create_sample_configurations():
    """Cr√©e des configurations d'exemple pour d√©monstration"""
    
    print("\nüé® Cr√©ation de configurations d'exemple...")
    
    config_manager = ConfigurationManager("test_configs")
    
    # Configuration e-commerce
    ecommerce_config = {
        "name": "Configuration E-commerce Standard",
        "description": "Configuration compl√®te pour un site e-commerce",
        "version": "1.0.0",
        "created_at": datetime.now().isoformat(),
        "updated_at": datetime.now().isoformat(),
        "rule_engine": {
            "business_rules": [
                {
                    "name": "Gestion Stock",
                    "description": "V√©rification automatique du stock",
                    "conditions": {"intent": "commander"},
                    "actions": [{"action": "check_stock"}],
                    "priority": 1,
                    "category": "stock",
                    "enabled": True
                }
            ],
            "statistics": {"total_rules": 1, "active_rules": 1},
            "templates": {}
        },
        "knowledge_base": {
            "ontology_classes": [
                {"name": "Product", "properties": ["name", "price", "stock"]},
                {"name": "Order", "properties": ["items", "total", "status"]}
            ],
            "instances": [],
            "business_handlers": []
        },
        "vector_store": {
            "collections": ["products", "orders"],
            "statistics": {"total_vectors": 0}
        },
        "llm_config": {
            "model": "gpt-3.5-turbo",
            "temperature": 0.7,
            "max_tokens": 1000
        },
        "tools_config": {
            "stock_api": {"enabled": True},
            "payment_api": {"enabled": True},
            "delivery_api": {"enabled": True}
        },
        "agent_config": {
            "intent_patterns": {"commander": ["commander", "acheter"]},
            "fallback_enabled": True,
            "confidence_threshold": 0.7
        },
        "metadata": {
            "exported_by": "ConfigurationManager",
            "system_version": "1.0.0",
            "business_domain": "e-commerce"
        }
    }
    
    # Sauvegarde en JSON
    json_file = config_manager.config_dir / "ecommerce_config.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(ecommerce_config, f, indent=2, ensure_ascii=False)
    
    # Sauvegarde en YAML
    yaml_file = config_manager.config_dir / "ecommerce_config.yaml"
    with open(yaml_file, 'w', encoding='utf-8') as f:
        yaml.dump(ecommerce_config, f, default_flow_style=False, allow_unicode=True)
    
    print(f"‚úÖ Configuration e-commerce cr√©√©e: {json_file}")
    print(f"‚úÖ Configuration e-commerce cr√©√©e: {yaml_file}")


def main():
    """Fonction principale de test"""
    
    print("üß™ Test du Gestionnaire de Configuration")
    print("=" * 50)
    
    # Cr√©ation de configurations d'exemple
    create_sample_configurations()
    
    # Test d'export
    json_file, yaml_file = test_export_configuration()
    
    if json_file and yaml_file:
        # Test d'import
        json_config, yaml_config = test_import_configuration(json_file, yaml_file)
        
        if json_config and yaml_config:
            # Test d'application
            test_apply_configuration(json_config, yaml_config)
    
    # Test de la liste
    test_list_configurations()
    
    print("\nüéâ Tests termin√©s!")
    print("\nüìÅ Les configurations sont disponibles dans le dossier 'test_configs'")
    print("üåê Vous pouvez maintenant tester l'interface d'administration:")
    print("   1. D√©marrez l'API: python admin_api.py")
    print("   2. D√©marrez le frontend: cd admin-frontend && npm run dev")
    print("   3. Allez sur l'onglet 'Configurations' pour tester l'import/export")


if __name__ == "__main__":
    main() 