#!/usr/bin/env python3
"""
Test du Proxy S√©mantique et de la R√©flexion
D√©monstration des √©quivalents s√©mantiques des Dynamic Proxy et de la r√©flexion en POO
"""

from knowledge_base import KnowledgeBase, SemanticProxy
from vector_store import VectorStore
from llm_interface import LLMInterface
from agent import CognitiveOrderAgent
import tools


def test_initialisation():
    """Test de l'initialisation du syst√®me"""
    print("üß™ TEST 1: INITIALISATION DU SYST√àME")
    print("=" * 50)
    
    try:
        # Test de la base de connaissances
        print("üìö Test de la base de connaissances...")
        kb = KnowledgeBase()
        print("   ‚úÖ Base de connaissances initialis√©e")
        
        # Test de l'interface LLM
        print("ü§ñ Test de l'interface LLM...")
        try:
            llm = LLMInterface()
            print("   ‚úÖ Interface LLM initialis√©e (OpenAI)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Interface LLM non disponible: {e}")
            llm = None
        
        # Test de la base vectorielle
        print("üîç Test de la base vectorielle...")
        vector_store = VectorStore(llm_interface=llm)
        print("   ‚úÖ Base vectorielle initialis√©e")
        
        # Test de l'agent
        print("üß† Test de l'agent cognitif...")
        agent = CognitiveOrderAgent(kb, vector_store, llm)
        print("   ‚úÖ Agent cognitif initialis√©")
        
        return kb, vector_store, llm, agent
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de l'initialisation: {e}")
        return None, None, None, None


def test_creation_classes_comportementales(kb):
    """Test de cr√©ation de classes avec comportements"""
    print("\nüß™ TEST 2: CR√âATION DE CLASSES COMPORTEMENTALES")
    print("=" * 50)
    
    try:
        # Cr√©ation de la classe Client avec comportements
        print("üÜï Cr√©ation de la classe Client avec comportements...")
        client_methods = [
            {
                'name': 'passer_commande',
                'parameters': [
                    {'name': 'produits', 'type': 'List[Product]'},
                    {'name': 'quantite', 'type': 'int'}
                ],
                'return_type': 'Order'
            },
            {
                'name': 'payer',
                'parameters': [
                    {'name': 'montant', 'type': 'float'},
                    {'name': 'methode', 'type': 'string'}
                ],
                'return_type': 'Payment'
            },
            {
                'name': 'modifier_profil',
                'parameters': [
                    {'name': 'nouveau_nom', 'type': 'string'},
                    {'name': 'nouveau_email', 'type': 'string'}
                ],
                'return_type': 'Client'
            }
        ]
        
        success = kb.add_behavior_class('Client', client_methods)
        print(f"   R√©sultat: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
        
        # Cr√©ation de la classe Order avec machine √† √©tats
        print("\nüÜï Cr√©ation de la classe Order avec machine √† √©tats...")
        order_states = ['en_attente', 'validee', 'payee', 'livree', 'annulee']
        order_transitions = [
            {'from': 'en_attente', 'to': 'validee', 'trigger': 'validation'},
            {'from': 'validee', 'to': 'payee', 'trigger': 'paiement'},
            {'from': 'payee', 'to': 'livree', 'trigger': 'livraison'},
            {'from': 'en_attente', 'to': 'annulee', 'trigger': 'annulation'},
            {'from': 'validee', 'to': 'annulee', 'trigger': 'annulation'}
        ]
        
        success = kb.add_state_machine('Order', order_states, order_transitions)
        print(f"   R√©sultat: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def test_proxy_semantique(kb):
    """Test du proxy s√©mantique"""
    print("\nüß™ TEST 3: PROXY S√âMANTIQUE")
    print("=" * 50)
    
    try:
        # Cr√©ation du gestionnaire de proxy
        print("üîß Cr√©ation du gestionnaire de proxy...")
        proxy_manager = SemanticProxy(kb)
        print("   ‚úÖ Gestionnaire de proxy cr√©√©")
        
        # Cr√©ation d'un proxy pour la classe Client
        print("\nüîß Cr√©ation d'un proxy pour la classe Client...")
        client_proxy = proxy_manager.create_proxy('Client')
        if client_proxy:
            print("   ‚úÖ Proxy pour la classe Client cr√©√©")
        else:
            print("   ‚ùå √âchec de cr√©ation du proxy")
            return False
        
        # Cr√©ation d'instances de test
        print("\nüÜï Cr√©ation d'instances de test...")
        john_props = {'hasName': 'John Doe', 'hasEmail': 'john@email.com'}
        john_id = kb.create_instance_dynamically('Client', john_props)
        print(f"   Instance John cr√©√©e: {john_id}")
        
        alice_props = {'hasName': 'Alice Martin', 'hasEmail': 'alice@email.com'}
        alice_id = kb.create_instance_dynamically('Client', alice_props)
        print(f"   Instance Alice cr√©√©e: {alice_id}")
        
        # Cr√©ation de proxies pour les instances
        print("\nüîß Cr√©ation de proxies pour les instances...")
        john_proxy = proxy_manager.create_proxy('Client', john_id)
        alice_proxy = proxy_manager.create_proxy('Client', alice_id)
        
        if john_proxy and alice_proxy:
            print("   ‚úÖ Proxies pour les instances cr√©√©s")
        else:
            print("   ‚ùå √âchec de cr√©ation des proxies d'instances")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def test_reflection(kb):
    """Test de la r√©flexion"""
    print("\nüß™ TEST 4: R√âFLEXION")
    print("=" * 50)
    
    try:
        proxy_manager = SemanticProxy(kb)
        
        # R√©flexion sur la classe Client
        print("üîç R√©flexion sur la classe Client...")
        structure = proxy_manager.reflect_class_structure('Client')
        
        if structure:
            print(f"   Classe: {structure.get('class_name', 'N/A')}")
            print(f"   URI: {structure.get('class_uri', 'N/A')}")
            print(f"   Propri√©t√©s: {len(structure.get('properties', []))}")
            print(f"   M√©thodes: {len(structure.get('methods', []))}")
            print(f"   Instances: {structure.get('instances_count', 0)}")
            
            # D√©tail des m√©thodes
            print("\n   M√©thodes disponibles:")
            for method in structure.get('methods', []):
                params = [p['name'] for p in method.get('parameters', [])]
                print(f"     - {method['name']}({', '.join(params)}) -> {method.get('return_type', 'void')}")
        else:
            print("   ‚ùå R√©flexion √©chou√©e")
            return False
        
        # Liste des m√©thodes disponibles
        print("\nüìã Liste des m√©thodes via proxy...")
        methods = proxy_manager.list_available_methods('Client')
        print(f"   M√©thodes trouv√©es: {len(methods)}")
        for method in methods:
            print(f"     - {method['name']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def test_execution_reflexive(kb):
    """Test de l'ex√©cution r√©flexive de m√©thodes"""
    print("\nüß™ TEST 5: EX√âCUTION R√âFLEXIVE")
    print("=" * 50)
    
    try:
        proxy_manager = SemanticProxy(kb)
        
        # R√©cup√®re une instance existante
        instances = kb.get_instances_of_class("http://example.org/ontology/Client")
        if not instances:
            print("   ‚ùå Aucune instance Client trouv√©e")
            return False
        
        instance_id = instances[0].split('/')[-1]
        print(f"   Utilisation de l'instance: {instance_id}")
        
        # Cr√©ation du proxy pour cette instance
        proxy = proxy_manager.create_proxy('Client', instance_id)
        if not proxy:
            print("   ‚ùå √âchec de cr√©ation du proxy")
            return False
        
        # Test d'ex√©cution de m√©thodes par r√©flexion
        print("\nüîÑ Test d'ex√©cution de m√©thodes...")
        
        # Test passer_commande
        print("   Test passer_commande...")
        try:
            result = proxy._execute_method('passer_commande', produits=['laptop_123'], quantite=2)
            print(f"     R√©sultat: {result}")
        except Exception as e:
            print(f"     Erreur: {e}")
        
        # Test payer
        print("   Test payer...")
        try:
            result = proxy._execute_method('payer', montant=1200.0, methode='carte')
            print(f"     R√©sultat: {result}")
        except Exception as e:
            print(f"     Erreur: {e}")
        
        # Test modifier_profil
        print("   Test modifier_profil...")
        try:
            result = proxy._execute_method('modifier_profil', nouveau_nom='John Smith', nouveau_email='john.smith@email.com')
            print(f"     R√©sultat: {result}")
        except Exception as e:
            print(f"     Erreur: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def test_outils_proxy(kb):
    """Test des outils de proxy"""
    print("\nüß™ TEST 6: OUTILS DE PROXY")
    print("=" * 50)
    
    try:
        # Test de cr√©ation de proxy via outil
        print("üîß Test de cr√©ation de proxy via outil...")
        success, message = tools.create_semantic_proxy_tool(kb, 'Client', None)
        print(f"   {message}")
        
        # Test de r√©flexion via outil
        print("\nüîç Test de r√©flexion via outil...")
        success, message = tools.reflect_class_tool('Client', kb)
        if success:
            print("   ‚úÖ R√©flexion r√©ussie")
            print(message[:200] + "..." if len(message) > 200 else message)
        else:
            print(f"   ‚ùå {message}")
        
        # Test de liste des m√©thodes via outil
        print("\nüìã Test de liste des m√©thodes via outil...")
        success, message = tools.list_proxy_methods_tool('Client', kb)
        if success:
            print("   ‚úÖ Liste des m√©thodes r√©ussie")
            print(message[:200] + "..." if len(message) > 200 else message)
        else:
            print(f"   ‚ùå {message}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def test_agent_proxy(agent):
    """Test de l'agent avec les nouvelles fonctionnalit√©s de proxy"""
    print("\nüß™ TEST 7: AGENT AVEC PROXY")
    print("=" * 50)
    
    try:
        # Test de r√©flexion via l'agent
        print("üîç Test de r√©flexion via l'agent...")
        response = agent.run_agent("R√©flexion sur la classe Client")
        print(f"   R√©ponse: {response[:100]}...")
        
        # Test de cr√©ation de proxy via l'agent
        print("\nüîß Test de cr√©ation de proxy via l'agent...")
        response = agent.run_agent("Cr√©er un proxy s√©mantique pour la classe Client")
        print(f"   R√©ponse: {response}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üîß TEST PROXY S√âMANTIQUE ET R√âFLEXION")
    print("=" * 70)
    print("Ce test d√©montre les √©quivalents s√©mantiques de :")
    print("- Dynamic Proxy en POO")
    print("- R√©flexion et introspection")
    print("- Ex√©cution dynamique de m√©thodes")
    print("- Instanciation par r√©flexion")
    print("=" * 70)
    
    # Initialisation
    kb, vector_store, llm, agent = test_initialisation()
    if not all([kb, vector_store, agent]):
        print("‚ùå √âchec de l'initialisation. Arr√™t des tests.")
        return
    
    # Tests
    tests = [
        ("Cr√©ation de classes comportementales", lambda: test_creation_classes_comportementales(kb)),
        ("Proxy s√©mantique", lambda: test_proxy_semantique(kb)),
        ("R√©flexion", lambda: test_reflection(kb)),
        ("Ex√©cution r√©flexive", lambda: test_execution_reflexive(kb)),
        ("Outils de proxy", lambda: test_outils_proxy(kb)),
        ("Agent avec proxy", lambda: test_agent_proxy(agent))
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans le test '{test_name}': {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:30} : {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS SONT PASS√âS !")
        print("Le syst√®me de proxy s√©mantique et de r√©flexion fonctionne parfaitement.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")


if __name__ == "__main__":
    main() 